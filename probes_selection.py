from json import loads
from haversine import haversine
from random import choice, choices
from tqdm import tqdm
import requests
import random
import folium

from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances_argmin_min
import numpy as np

with open("20240206.json", 'r') as f:
    probes = loads(f.read())["objects"]

def is_connected(probe_id: int) -> bool:
    r = requests.get(f"https://atlas.ripe.net/api/v2/probes/{probe_id}").text
    return loads(r)["status"]["name"] == "Connected"

def is_often_connected(probe_id: int, rate: float) -> bool:
    r = loads(requests.get(f"https://atlas.ripe.net/api/v2/probes/{probe_id}").text)
    total_uptime, first_connection = r["total_uptime"], r["first_connected"]
    #print(total_uptime/first_connection)
    return r["status"]["name"] == "Connected" or total_uptime/first_connection > rate

def get_probe_by_id(probe_id: int) -> dict:
    """Returns the probe dictionnary corresponding to the right id"""
    for p in probes:
        if p["id"] == probe_id:
            return p
    return {}

def get_location(probe_id: int) -> (float, float):
    """Returns the tuple (latitude, longitude) of the probe with id 'probe_id'"""
    probe = get_probe_by_id(probe_id)
    return probe["latitude"], probe["longitude"]

def get_location_list(ids_list: list) -> list:
    return [get_location(id) for id in ids_list]

def generate_map_file(ids_list, file_name, colors=None):
    locs = get_location_list(ids_list)
    m = folium.Map(location=[20,0], tiles="OpenStreetMap", zoom_start=2)
    if colors is None:
        colors = ['blue']*len(locs)
    for i in range(len(locs)):
        folium.Marker(location=locs[i], icon=folium.Icon(color=colors[i], icon='map-marker')).add_to(m)
    map_html = m._repr_html_()
    with open("maps/"+file_name+".html", 'w') as f:
        f.write(map_html)

def cluster(ids_list, n):
    kmeans = KMeans(n_clusters=n)
    locs = get_location_list(ids_list)
    kmeans.fit(locs)
    closests, _ = pairwise_distances_argmin_min(kmeans.cluster_centers_, locs)
    return kmeans, [ids_list[i] for i in closests]

def distance(loc1: float, loc2: float) -> float:
    """Returns the distance in kilometers between to points on Earth defined by their location"""
    return haversine(loc1, loc2)

def output_csv(ids_list):
    locs = get_location_list(ids_list)
    with open("output.csv", "w") as f:
        for i in range(50):
            loc = locs.pop()
            f.write(f"wifi,{loc[0]},{loc[1]}\n")
        for i in range(50):
            loc = locs.pop()
            f.write(f"cellular,{loc[0]},{loc[1]}\n")
        for i in range(50):
            loc = locs.pop()
            f.write(f"starlink,{loc[0]},{loc[1]}\n")
        for loc in locs:
            f.write(f"ethernet,{loc[0]},{loc[1]}\n")


def select_probes(L_wifi: list, L_cellular: list, L_starlink: list, possible_choices: list, radius: float = 10) -> list:
    """Select the last 100 probes from the possible choices using the set of first chosen probes"""

    # selecting the first 100 probes at random
    print("Selecting the first 100 probes")

    rate = 0.01

    connected_wifi = [p for p in tqdm(L_wifi) if is_connected(p)]
    connected_cellular = [p for p in tqdm(L_cellular) if is_often_connected(p, rate)]
    #generate_map_file(connected_wifi, "wifi-connected")
    #generate_map_file(connected_cellular, f"cellular-connected-{rate}")

    connected_cellular = list(set(connected_cellular)-set(connected_wifi))
    #print(f"{len(connected_wifi)} connected Wi-Fi probes and {len(connected_cellular)} different connected cellular probes")
    _, wifi_centers = cluster(connected_wifi, min(len(connected_wifi),50))  
    _, cellular_centers = cluster(connected_cellular, min(len(connected_cellular), 50))
    #generate_map_file(wifi_centers, "wifi-centers")
    #generate_map_file(cellular_centers, f"cellular-centers-{rate}")

    first_100probes = wifi_centers + cellular_centers

    generate_map_file(first_100probes, "first100-test", ['blue']*100)
    print(len(first_100probes))


    print("First 100 probes selected:")
    print(first_100probes)
    
    # selecting the Starlink probes at random (such that they are not already selected)
    print("\nSelecting the Starlink probes")
    connected_starlink = [p for p in tqdm(L_starlink) if is_connected(p)]
    connected_starlink = list(set(connected_starlink)-set(first_100probes))
    print(f"{len(connected_starlink)} Starlink-connected probes different than the first 100 probes")

    _, starlink_probes = cluster(connected_starlink, min(len(connected_starlink),50))
    generate_map_file(starlink_probes, "starlink", ['red']*50)

    print("Starlink probes selected:")
    print(starlink_probes)
    
    # selecting the last 100 nodes
    locations = [get_location(id) for id in first_100probes]
    last_100probes = []
    print("\nSelecting the last 100 probes randomly:")
    probes_list = list(set(possible_choices) - set(first_100probes) - set(starlink_probes))

    pbar1 = tqdm(total=100)
    random.shuffle(probes_list)
    for id in probes_list:
        if id in first_100probes or id in starlink_probes or id in last_100probes:
            continue
        loc1 = get_location(id)
        for loc2 in locations:
            if distance(loc1, loc2) <= radius and is_connected(id):
                last_100probes.append(id)
                pbar1.update(1)
                break
        if len(last_100probes) == 100:
            break
    pbar1.close()

    #connected_choices = [p for p in tqdm(probes_list) if is_connected(p)]
    #_, last_100probes = cluster(connected_choices, min(len(connected_choices), 100))
    if len(last_100probes) != 100: 
        print("Not able to find 100 probes. Unfortunately the problem is unsolvable in this state")

    generate_map_file(last_100probes, f"last100-test{radius}", ['green']*100)

    
    generate_map_file(first_100probes + starlink_probes + last_100probes, f"selected-test{radius}", ["blue"]*100+["red"]*50+["green"]*100)

    return first_100probes + starlink_probes + last_100probes

# "home wi-fi"
L_wifi = [32, 4289, 10993, 11268, 12102, 13933, 14680, 14723, 14755, 15642, 16601, 16872, 17590, 17968, 18678, 18833, 21529, 22585, 23016, 23835, 24356, 24628, 24908, 25807, 26143, 26485, 27119, 27650, 28357, 29034, 29049, 29292, 29500, 30596, 31811, 32006, 32378, 32772, 34009, 34441, 34538, 34726, 35407, 50274, 50463, 50568, 50852, 50927, 51025, 51104, 51860, 52028, 52172, 52527, 52844, 53569, 53829, 54080, 55404, 55619, 55739, 55836, 60345, 61316, 1000068, 1000261, 1000327, 1000362, 1000559, 1000587, 1000762, 1000763, 1000772, 1001151, 1001169, 1001319, 1001514, 1001771, 1002262, 1002493, 1002565, 1002603, 1002757, 1002758, 1002768, 1002801, 1003341, 1003814, 1004600, 1004628, 1004736, 1004858, 1004984, 1005159, 1005825, 1005846, 1005913, 1005958, 1006833, 1006934, 1006936, 1007355, 1007500]
# "mobile 4g" "mobile 3g" "mobile lte"
L_cellular = [863, 2659, 2673, 3028, 3601, 3819, 4365, 11170, 11824, 11902, 12590, 13308, 13320, 14755, 15342, 15644, 15651, 15708, 16377, 17247, 17602, 17789, 17941, 18416, 20102, 20948, 21286, 22394, 22527, 22935, 23036, 24080, 25225, 25262, 25608, 26057, 26229, 26320, 26831, 27326, 27363, 27411, 27438, 27989, 28088, 28126, 28572, 28648, 29550, 29793, 29796, 30093, 30213, 30235, 30514, 30765, 30952, 31072, 31159, 32019, 32323, 32433, 32463, 32473, 32513, 32598, 32972, 33318, 33879, 34648, 34882, 34945, 35229, 35232, 35332, 35385, 35439, 35445, 35462, 35507, 35525, 50024, 50081, 50420, 50612, 50640, 50705, 50719, 51136, 51684, 52640, 52740, 52772, 52788, 52923, 53236, 53428, 53738, 53870, 54028, 54524, 54738, 54781, 54789, 54804, 55005, 55036, 55293, 55688, 55704, 55795, 60200, 60266, 60732, 60985, 61209, 61868, 1000234, 1000402, 1000483, 1000551, 1000568, 1000729, 1000736, 1000770, 1000827, 1000879, 1001185, 1001211, 1001228, 1001359, 1001504, 1001615, 1001633, 1001738, 1002310, 1002522, 1002584, 1002591, 1002626, 1002681, 1002682, 1002683, 1002684, 1002849, 1003040, 1003419, 1003774, 1003920, 1004198, 1004701, 1004734, 1004738, 1004748, 1004854, 1004866, 1005061, 1005072, 1005126, 1005408, 1005432, 1005481, 1005633, 1005834, 1005835, 1005856, 1006110, 1006164, 1006609, 1006693, 1006698, 1007327, 1007469]
# by ASN
L_starlink = [28, 10743, 11585, 12426, 12863, 13040, 15623, 16869, 17128, 18250, 19520, 19648, 19983, 20306, 20544, 22802, 22895, 23127, 25080, 26380, 26696, 28221, 30326, 32686, 33645, 34558, 35042, 35681, 35751, 50008, 50017, 50300, 50448, 51136, 51475, 52157, 52422, 52918, 53765, 53789, 53798, 53852, 54330, 54787, 54837, 55492, 60182, 60234, 60287, 60323, 60328, 60510, 60549, 60797, 60929, 61081, 61113, 61241, 61365, 61366, 61435, 61498, 61532, 61537, 61602, 61631, 61731, 61780, 61809, 61899, 61926, 61968, 62083, 62365, 62390, 62417, 62498, 62553, 62613, 62741, 62843, 62868, 62911, 62953, 63017, 1001356, 1001821, 1002022, 1002289, 1002750, 1003131, 1003713, 1003753, 1003774, 1003898, 1003989, 1004232, 1004353, 1004453, 1004478, 1004701, 1004828, 1004876, 1005302, 1005561, 1005562, 1005623, 1005627, 1005647, 1005817, 1006246, 1006295, 1006382, 1006388, 1006406, 1006477, 1006481, 1006803, 1006857, 1006896, 1006948, 1007159, 1007278, 1007280]
# "home cable"
L_residential_ethernet = [7, 8, 24, 32, 69, 78, 103, 198, 212, 246, 283, 295, 307, 345, 399, 438, 583, 591, 608, 686, 735, 851, 862, 910, 916, 933, 995, 1000, 1046, 1123, 1134, 1142, 1160, 1192, 1194, 1243, 1245, 1314, 1316, 1318, 1340, 1381, 1419, 2007, 2027, 2053, 2078, 2085, 2098, 2101, 2114, 2131, 2217, 2256, 2267, 2297, 2315, 2355, 2374, 2387, 2470, 2471, 2491, 2506, 2520, 2529, 2550, 2567, 2572, 2581, 2594, 2611, 2668, 2683, 2684, 2715, 2735, 2736, 2775, 2778, 2829, 2920, 2922, 2978, 2987, 3019, 3051, 3081, 3093, 3110, 3113, 3142, 3144, 3154, 3172, 3176, 3186, 3253, 3328, 3395, 3540, 3626, 3633, 3639, 3671, 3690, 3716, 3790, 3791, 3811, 3880, 3933, 3969, 4009, 4033, 4065, 4140, 4160, 4180, 4183, 4208, 4215, 4233, 4280, 4284, 4315, 4328, 4335, 4420, 4472, 4477, 4544, 4547, 4551, 4570, 4596, 4599, 4602, 4743, 4786, 4843, 4862, 4888, 4978, 10009, 10046, 10085, 10101, 10120, 10141, 10142, 10150, 10194, 10315, 10317, 10331, 10338, 10357, 10386, 10394, 10400, 10456, 10486, 10514, 10518, 10540, 10553, 10555, 10556, 10559, 10568, 10576, 10584, 10611, 10650, 10701, 10775, 10800, 10838, 10858, 10884, 10928, 10982, 11035, 11095, 11098, 11106, 11108, 11134, 11158, 11162, 11179, 11191, 11199, 11209, 11257, 11279, 11325, 11407, 11456, 11481, 11496, 11499, 11500, 11523, 11540, 11629, 11702, 11723, 11735, 11746, 11750, 11758, 11787, 11795, 11818, 11819, 11849, 11857, 11863, 11864, 11883, 11962, 12012, 12060, 12095, 12121, 12127, 12162, 12180, 12249, 12315, 12330, 12331, 12336, 12341, 12518, 12538, 12621, 12649, 12679, 12685, 12693, 12721, 12728, 12732, 12735, 12756, 12813, 12832, 12887, 12908, 13131, 13149, 13222, 13242, 13251, 13257, 13280, 13306, 13322, 13328, 13335, 13444, 13450, 13595, 13600, 13628, 13631, 13654, 13656, 13667, 13671, 13686, 13688, 13846, 13897, 13942, 13946, 14065, 14068, 14090, 14111, 14160, 14164, 14203, 14207, 14253, 14277, 14321, 14332, 14341, 14344, 14507, 14519, 14521, 14531, 14583, 14604, 14606, 14613, 14635, 14653, 14680, 14723, 14743, 14745, 14984, 14985, 15018, 15024, 15049, 15053, 15056, 15059, 15061, 15074, 15079, 15088, 15102, 15114, 15119, 15133, 15170, 15176, 15178, 15189, 15196, 15198, 15330, 15364, 15481, 15542, 15623, 15637, 15661, 15706, 15714, 15716, 15759, 15787, 15788, 15789, 15791, 15806, 15958, 15979, 15993, 16027, 16032, 16050, 16058, 16063, 16100, 16101, 16143, 16144, 16168, 16243, 16272, 16274, 16289, 16333, 16357, 16379, 16393, 16688, 16696, 16751, 16785, 16808, 16862, 16888, 16898, 16909, 16942, 16949, 16966, 17038, 17080, 17085, 17093, 17254, 17257, 17297, 17304, 17306, 17324, 17335, 17423, 17517, 17573, 17587, 17596, 17612, 17634, 17706, 17708, 17717, 17761, 17766, 17781, 17866, 17887, 17929, 17934, 17948, 17950, 17953, 17984, 18059, 18061, 18165, 18201, 18203, 18205, 18269, 18277, 18357, 18371, 18396, 18401, 18425, 18435, 18478, 18540, 18589, 18602, 18690, 18713, 18750, 18811, 18841, 18920, 18957, 19034, 19053, 19106, 19122, 19169, 19172, 19180, 19200, 19214, 19244, 19275, 19293, 19316, 19324, 19352, 19396, 19433, 19457, 19476, 19491, 19496, 19505, 19518, 19650, 19723, 19761, 19866, 19905, 19917, 19921, 19923, 19954, 19956, 19963, 19966, 19985, 19991, 20017, 20059, 20068, 20091, 20148, 20214, 20236, 20253, 20273, 20283, 20292, 20348, 20372, 20435, 20453, 20584, 20607, 20625, 20684, 20727, 20730, 20738, 20739, 20754, 20756, 20773, 20791, 20825, 20833, 20879, 20882, 20916, 20966, 21028, 21031, 21040, 21228, 21263, 21359, 21360, 21415, 21449, 21464, 21481, 21500, 21515, 21520, 21566, 21575, 21579, 21700, 21710, 21726, 21793, 21810, 21867, 21893, 21895, 22038, 22077, 22093, 22102, 22111, 22163, 22181, 22353, 22382, 22424, 22464, 22702, 22717, 22736, 22758, 22764, 22773, 22782, 22785, 22853, 22948, 22950, 22951, 22964, 23038, 23052, 23074, 23077, 23087, 23157, 23173, 23177, 23186, 23208, 23223, 23232, 23247, 23277, 23289, 23291, 23360, 23450, 23500, 23690, 23702, 23713, 23764, 23771, 23825, 23846, 23849, 23945, 23971, 24000, 24033, 24042, 24046, 24049, 24064, 24094, 24109, 24174, 24185, 24202, 24211, 24233, 24240, 24303, 24312, 24314, 24357, 24363, 24371, 24391, 24420, 24537, 24550, 24551, 24645, 24731, 24797, 24841, 24857, 24894, 24899, 24908, 24940, 24967, 25006, 25015, 25019, 25020, 25144, 25150, 25324, 25333, 25347, 25362, 25379, 25390, 25393, 25497, 25501, 25656, 25676, 25695, 25698, 25751, 25765, 25768, 25777, 25807, 25828, 25867, 25921, 25924, 26028, 26036, 26051, 26064, 26094, 26151, 26161, 26175, 26209, 26316, 26382, 26396, 26404, 26409, 26420, 26424, 26432, 26459, 26463, 26475, 26485, 26492, 26518, 26548, 26610, 26616, 26694, 26730, 26767, 26793, 26799, 26816, 26847, 26850, 26855, 26917, 26943, 26946, 26958, 26959, 27067, 27088, 27128, 27134, 27193, 27219, 27241, 27283, 27300, 27310, 27323, 27327, 27383, 27455, 27530, 27545, 27558, 27667, 27757, 27761, 27766, 27788, 27793, 27796, 27798, 27932, 28085, 28181, 28193, 28225, 28244, 28275, 28276, 28293, 28295, 28315, 28321, 28373, 28416, 28447, 28451, 28470, 28499, 28511, 28554, 28556, 28597, 28625, 28631, 28659, 28660, 28664, 28729, 28742, 28788, 28807, 28828, 28860, 28872, 28886, 28889, 28895, 28920, 28938, 29004, 29010, 29034, 29044, 29065, 29066, 29081, 29095, 29160, 29176, 29196, 29206, 29208, 29219, 29222, 29227, 29265, 29304, 29333, 29355, 29387, 29481, 29503, 29508, 29509, 29572, 29612, 29628, 29633, 29679, 29698, 29702, 29717, 29726, 29740, 29748, 29768, 29771, 29795, 29797, 29864, 29876, 29930, 30109, 30218, 30255, 30354, 30355, 30368, 30406, 30418, 30419, 30427, 30453, 30457, 30490, 30502, 30504, 30532, 30561, 30569, 30582, 30612, 30680, 30786, 30845, 30883, 30902, 30933, 30938, 30970, 30971, 31030, 31046, 31078, 31114, 31122, 31129, 31224, 31246, 31252, 31289, 31305, 31342, 31423, 31465, 31490, 31492, 31530, 31559, 31563, 31586, 31591, 31623, 31654, 31715, 31799, 31861, 31915, 31916, 31924, 31925, 31969, 32006, 32032, 32034, 32111, 32112, 32120, 32134, 32150, 32292, 32360, 32389, 32453, 32506, 32568, 32601, 32670, 32697, 32718, 32834, 32880, 32941, 32948, 33006, 33011, 33036, 33067, 33101, 33122, 33147, 33182, 33218, 33242, 33249, 33293, 33417, 33419, 33439, 33486, 33522, 33531, 33611, 33629, 33644, 33679, 33713, 33807, 33835, 33883, 33911, 33915, 33950, 34010, 34019, 34039, 34087, 34148, 34153, 34300, 34334, 34338, 34481, 34579, 34618, 34631, 34643, 34649, 34682, 34719, 34726, 34770, 34799, 34818, 34844, 34888, 34897, 34947, 34948, 34951, 34954, 34965, 35001, 35031, 35053, 35056, 35066, 35092, 35109, 35221, 35293, 35556, 35559, 35580, 35606, 35634, 35643, 35653, 35659, 35663, 35669, 35720, 35783, 50002, 50070, 50094, 50170, 50174, 50205, 50218, 50219, 50284, 50286, 50297, 50325, 50375, 50379, 50393, 50460, 50486, 50495, 50520, 50529, 50579, 50603, 50642, 50674, 50676, 50759, 50829, 50848, 50889, 50915, 50926, 50936, 50969, 50985, 50991, 50995, 50996, 51002, 51025, 51084, 51095, 51101, 51104, 51113, 51172, 51181, 51233, 51234, 51268, 51270, 51293, 51343, 51374, 51557, 51573, 51580, 51636, 51641, 51660, 51670, 51682, 51727, 51754, 51762, 51766, 51779, 51880, 51890, 51908, 51971, 52014, 52041, 52051, 52089, 52104, 52108, 52109, 52118, 52143, 52154, 52166, 52238, 52275, 52281, 52305, 52337, 52340, 52343, 52372, 52413, 52431, 52433, 52502, 52512, 52516, 52607, 52630, 52644, 52653, 52675, 52681, 52719, 52722, 52727, 52747, 52752, 52815, 52817, 52824, 52849, 52895, 52929, 53028, 53031, 53101, 53107, 53125, 53159, 53224, 53244, 53266, 53293, 53297, 53306, 53335, 53398, 53475, 53509, 53517, 53533, 53576, 53670, 53713, 53716, 53729, 53829, 53847, 53861, 53878, 53913, 53915, 53960, 53961, 53965, 53969, 53980, 53984, 53989, 53994, 54010, 54041, 54090, 54104, 54146, 54148, 54192, 54212, 54214, 54234, 54235, 54251, 54252, 54256, 54276, 54278, 54321, 54344, 54372, 54406, 54410, 54417, 54468, 54476, 54486, 54510, 54514, 54520, 54540, 54558, 54572, 54580, 54641, 54704, 54720, 54736, 54737, 54744, 54790, 54803, 54842, 54845, 54851, 54876, 54877, 54955, 54989, 54999, 55007, 55034, 55051, 55116, 55120, 55189, 55265, 55270, 55325, 55354, 55379, 55418, 55444, 55458, 55465, 55499, 55505, 55541, 55611, 55624, 55631, 55650, 55653, 55662, 55700, 55717, 55719, 55725, 55748, 55752, 55769, 55772, 55774, 55783, 55785, 55820, 60158, 60169, 60180, 60259, 60329, 60363, 60371, 60397, 60398, 60455, 60459, 60498, 60611, 60612, 60633, 60675, 60694, 60748, 60750, 60782, 60828, 60922, 61010, 61015, 61051, 61248, 61262, 61292, 61345, 61376, 61421, 61449, 61507, 61644, 61795, 61849, 61879, 62045, 62063, 62140, 62165, 62226, 62254, 62263, 62372, 62416, 62469, 62533, 62609, 62642, 62660, 62718, 62958, 63009, 63019, 63060, 1000038, 1000039, 1000041, 1000062, 1000063, 1000071, 1000077, 1000125, 1000169, 1000256, 1000261, 1000284, 1000287, 1000311, 1000346, 1000347, 1000348, 1000362, 1000390, 1000467, 1000508, 1000552, 1000619, 1000628, 1000677, 1000704, 1000726, 1000741, 1000756, 1000762, 1000763, 1000771, 1000779, 1000786, 1000799, 1000801, 1000802, 1000819, 1000882, 1000892, 1000911, 1000919, 1000933, 1001049, 1001061, 1001079, 1001131, 1001142, 1001196, 1001210, 1001235, 1001354, 1001360, 1001393, 1001402, 1001468, 1001544, 1001563, 1001589, 1001616, 1001645, 1001648, 1001656, 1001682, 1001768, 1001774, 1001816, 1001823, 1001879, 1001965, 1001972, 1002003, 1002018, 1002176, 1002179, 1002206, 1002220, 1002225, 1002403, 1002409, 1002451, 1002464, 1002474, 1002477, 1002482, 1002490, 1002491, 1002526, 1002532, 1002538, 1002550, 1002553, 1002555, 1002564, 1002573, 1002580, 1002581, 1002603, 1002627, 1002753, 1002775, 1002777, 1002820, 1002855, 1002862, 1002872, 1002891, 1002892, 1002897, 1002908, 1002954, 1003035, 1003070, 1003077, 1003123, 1003127, 1003183, 1003250, 1003256, 1003290, 1003336, 1003337, 1003349, 1003373, 1003444, 1003447, 1003477, 1003489, 1003553, 1003572, 1003584, 1003593, 1003638, 1003664, 1003665, 1003693, 1003719, 1003722, 1003804, 1003814, 1003900, 1003967, 1004072, 1004203, 1004205, 1004243, 1004494, 1004515, 1004528, 1004533, 1004537, 1004543, 1004590, 1004669, 1004672, 1004789, 1004823, 1004923, 1004974, 1004993, 1004995, 1005041, 1005067, 1005096, 1005100, 1005150, 1005158, 1005161, 1005215, 1005341, 1005397, 1005490, 1005553, 1005558, 1005563, 1005582, 1005693, 1005701, 1005751, 1005796, 1005807, 1005819, 1005823, 1005848, 1005883, 1005908, 1005958, 1006050, 1006062, 1006078, 1006088, 1006105, 1006113, 1006118, 1006127, 1006170, 1006197, 1006202, 1006205, 1006223, 1006232, 1006235, 1006238, 1006240, 1006242, 1006284, 1006313, 1006327, 1006342, 1006396, 1006452, 1006465, 1006471, 1006572, 1006636, 1006656, 1006719, 1006759, 1006860, 1006924, 1006934, 1006936, 1006959, 1006964, 1006969, 1007096, 1007239, 1007286, 1007341, 1007376, 1007399, 1007431, 1007444, 1007473, 1007506]


selected = select_probes(L_wifi, L_cellular, L_starlink, L_residential_ethernet, 20)
print("Selected probes:")
print(selected)

output_csv(selected)